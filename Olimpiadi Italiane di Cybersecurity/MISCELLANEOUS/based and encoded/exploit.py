from pwn import *
import json
import base64
from bitstring import BitArray

# Connessione al servizio
conn = remote('based.challs.olicyber.it', 10600)
# welcome message
conn.recvline()
conn.recvline()
conn.recvline()
conn.recvline()
while True:
    # Lettura del messaggio in formato JSON
    msg = conn.recvline().decode().strip()
    richiesta = conn.recvline().decode().strip()
    richiesta = json.loads(richiesta)
    richiesta = richiesta['message'].split(':')[0]
    if 'da binario!' in msg:
        byte_string = int(richiesta, 2).to_bytes((len(richiesta) + 7) // 8, byteorder='big')
        decoded_msg = byte_string.decode('utf-8')
    elif 'a binario' in msg:
        decoded_msg = ''.join(format(ord(c), '08b') for c in richiesta)
        decoded_msg = decoded_msg[1:]
    elif 'da esadecimale' in msg:
        decoded_msg = bytes.fromhex(richiesta).decode('utf-8')
    elif 'a esadecimale' in msg:
        decoded_msg = binascii.hexlify(richiesta.encode()).decode()
    elif 'da base64' in msg:
        decoded_msg = base64.b64decode(richiesta).decode('utf-8')
    elif 'a base64' in msg:
        decoded_msg = base64.b64encode(str(richiesta).encode()).decode('utf-8')
    else:
        decoded_msg = 'Errore: casistica non gestita'
    conn.recvline()
    # Costruzione della risposta in formato JSON
    answer = {'answer': decoded_msg}
    json_answer = json.dumps(answer)
    # Invio della risposta al servizio
    conn.sendline(str(json_answer).encode())
    # Lettura della risposta del servizio
    print(conn.recvline())
    conn.recvline()
    conn.recvline()

# Chiusura della connessione
conn.close()